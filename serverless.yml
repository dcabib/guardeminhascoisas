service: user-auth

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-offline-dynamodb-stream

custom:
  env: ${file(env.${opt:STAGE, 'prod'}.yml), file(env.yml)}

  #DynamoDB Local Configuration
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    stages:
      - test
    seed:
      domain:
        sources:
          - table: ${self:service}-${self:provider.stage}-users
            sources: [./database/seeds/users.json]

  #DynamoDB STREAMS Local Configuration
  dynamodbStream:
    host: localhost
    port: 8000
    pollForever: true
    region: ${self:custom.env.REGION}
    streams:
      - table: ${self:provider.environment.TABLENAME_USERS}
        functions:
          - user_stream_listener

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:STAGE, self:custom.env.STAGE}
  region: ${self:custom.env.REGION}

  environment:
    JWT_SECRET: ${self:custom.env.JWT_SECRET}
    TABLENAME_USERS: ${self:service}-${self:provider.stage}-users
    TABLENAME_USERS_DELETED: ${self:service}-${self:provider.stage}-users-deleted

  iamRoleStatementsStream:
    - Effect: Allow
      Action:
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:custom.env.REGION}:#{AWS::AccountId}:table/${self:provider.environment.TABLENAME_USERS}/stream/*"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:#{AWS::AccountId}:table/${self:provider.environment.TABLENAME_USERS},
                arn:aws:dynamodb:${opt:region, self:provider.region}:#{AWS::AccountId}:table/${self:provider.environment.TABLENAME_USERS_DELETED}"

functions:

  verify-token:
    handler: app/Middleware/VerifyToken.auth

  login:
    handler: app/Handlers/Users.login
    iamRoleConfig: ${self:provider.iamRoleStatements}
    events:
      - http:
          path: login
          method: post
          cors: true

  register:
    handler: app/Handlers/Users.register
    iamRoleConfig: ${self:provider.iamRoleStatements}
    events:
      - http:
          path: register
          method: post
          cors: true

  user:
    handler: app/Handlers/Users.user
    iamRoleConfig: ${self:provider.iamRoleStatements}
    events:
      - http:
          path: user
          method: get
          cors: true
          authorizer: verify-token
          
  userUpdate:
    handler: app/Handlers/Users.update
    iamRoleConfig: ${self:provider.iamRoleStatements}
    events:
      - http:
          path: user
          method: put
          cors: true
          authorizer: verify-token

  delete:
    handler: app/Handlers/Users.deleteUser
    iamRoleConfig: ${self:provider.iamRoleStatements}
    events:
      - http:
          path: user
          method: delete
          cors: true
          authorizer: verify-token

  user_stream_listener:
      handler: app/Handlers/Users.stream_listener
      iamRoleConfig: ${self:provider.iamRoleStatementsStream}
      events:
        - stream:
            type: dynamodb
            arn: !GetAtt UsersDynamoDbTable.StreamArn

resources:
  Resources:
    UsersDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:provider.environment.TABLENAME_USERS}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    DeletedUsersDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:provider.environment.TABLENAME_USERS_DELETED}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
